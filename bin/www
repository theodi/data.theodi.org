#!/usr/bin/env node

const app = require('../app');
const http = require('http');
const config = require('config');

const port = find_port();

// Fire up the server
const server = http.createServer(app);
server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

///////////////////
// server callbacks
function onError(error) {
  if (error.syscall !== 'listen')
    throw error;

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  } // switch
} // onError

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
} // onListening

///////////////////
function find_port() {
  if (process.env.PORT) {
    console.log("Using PORT environment variable");
    return normalize_port(process.env.PORT);
  } // if ...

  return normalize_port(config.get('express.port'));
} // find_port

function normalize_port(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) // named pipe (we hope!)
    return val;

  if (port >= 0)
    return port;

  return false;
} // normalize_port
